{"version":3,"sources":["src/proto.js","src/logic.js","src/main.js","src/index.js"],"names":["String","prototype","capitalize","toLowerCase","replace","c","toUpperCase","Date","copy","valueOf","add","units","quantity","getter","setter","curValue","extract_csv_data","data","test","slice","lines","split","headers","shift","csv_body","map","l","csv_mapped","line","line_mapped","i","length","text","fixBooleanField","list","field","a","getFilteredEvents","events_obj","asoc_obj","eventsFilter","filtered_evts","all_events","filter","virtuals","tde","find","Detector_Name","sensor_name","Is_Virtual","physicals","strToDate","str","dateToStr","date","toISOString","calculatePottentialMatches","relevant_events","evt","result","evt_id","event","within3sec","targetTimes","curTime","sys_time","timeStrToSearch","push","parentSensor","virtual_sensors","Virtual_Powered_By","physical_events_at","ph","addToScreen","msg","li","document","createElement","innerText","querySelector","append","logInfo","extra","console","info","logWarning","warn","finalizeResult","log","window","classList","remove","getJsonFile","download","JSON","stringify","file","element","className","setAttribute","encodeURIComponent","body","appendChild","click","removeChild","events_txt","asoc_txt","preconditions","setTimeout","fetch","then","r","ok","d","main","Promise","all","res","physical_sensors","m","desc","includes","train_detected_events","potentials","require"],"mappings":"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","file":"src.3e12b7df.js","sourceRoot":"..","sourcesContent":["String.prototype.capitalize = function () {\n  return this.toLowerCase().replace(/^\\w/, (c) => c.toUpperCase());\n};\n\nDate.prototype.copy = function () {\n  return new Date(this.valueOf());\n};\n\nDate.prototype.add = function (units, quantity) {\n  if (quantity) {\n    units = `${units}`.capitalize();\n    const getter = `get${units}`,\n      setter = `set${units}`;\n    if (!getter || !setter) throw \"cannot update requested quantity: \" + units;\n    const curValue = this[getter]();\n    this[setter](curValue + quantity);\n  }\n  return this;\n};\n","const extract_csv_data = async (data) => {\n  if (!/^\\w$/.test(data[0]))\n    data = data.slice(1); // fix 1st bad char in csv\n  const lines = data.split(\"\\r\\n\")\n  const headers = lines.shift().split(\",\")\n  const csv_body = lines.map(l => l.split(\",\"))\n  const csv_mapped = csv_body.map(line => {\n      const line_mapped = {}\n      for (let i = 0; i < headers.length; i++) {\n          const header = headers[i];\n          line_mapped[header] = line[i];\n      }\n      return line_mapped;\n  });\n  return {headers, csv_body, csv_mapped, text: data};\n}\n\nconst fixBooleanField = async (list, field) => {\n  return list.map((a) => {\n    if (a[field] == \"FALSE\") a[field] = false;\n    if (a[field] == \"TRUE\") a[field] = true;\n    return a;\n  });\n}\n\nconst getFilteredEvents = async (events_obj, asoc_obj, eventsFilter) => {\n  const filtered_evts = {\n    all_events:\n        events_obj.csv_mapped.filter(eventsFilter)\n  }\n  \n  filtered_evts.virtuals = \n    filtered_evts.all_events.filter(\n        tde => {\n            let asoc_rec = asoc_obj.csv_mapped.find(a => a.Detector_Name == tde.sensor_name);\n            return asoc_rec.Is_Virtual;\n        }\n    );\n  filtered_evts.physicals = \n    filtered_evts.all_events.filter(\n        tde => {\n            let asoc_rec = asoc_obj.csv_mapped.find(a => a.Detector_Name == tde.sensor_name);\n            return !asoc_rec.Is_Virtual; // is physical\n        }\n    );\n\n  return filtered_evts;\n}\n\nconst strToDate = (str) => new Date(str);\nconst dateToStr = (date) => date.toISOString().split(\".\")[0];\n\nconst calculatePottentialMatches = async (relevant_events, asoc_obj) => {\n  return relevant_events.virtuals.map(evt => {\n    let result = {\n      evt_id: evt.evt_id, event: evt,\n      within3sec: [],\n      targetTimes: []\n    };\n\n    const curTime = strToDate(evt.sys_time);\n    for (let i = 0; i <= 3; i++) {\n        const timeStrToSearch = dateToStr(curTime);\n        result.targetTimes.push(timeStrToSearch);\n        const parentSensor = asoc_obj.virtual_sensors\n            .find(a => a.sensor_name == evt.Detector_Name)\n            .Virtual_Powered_By;\n        result.parentSensor = parentSensor;\n        const physical_events_at = relevant_events.physicals\n            .filter(ph => ph.sensor_name == parentSensor && ph.sys_time == timeStrToSearch);\n        result.within3sec = [...result.within3sec, ...physical_events_at];\n        curTime.add('seconds', -1); // phyiscal are BEFORE virtual\n    }\n    return result;\n  });\n}\n\nconst addToScreen = (msg) => {\n  const li = document.createElement(\"li\");\n  li.innerText = msg;\n  document.querySelector(\"#state-tracking\").append(li);\n}\n\nconst logInfo = (msg, ...extra) => {\n  (extra) ? console.info(msg, ...extra) : console.info(msg);\n  addToScreen(msg);\n}\n\nconst logWarning = (msg, ...extra) => {\n  (extra) ? console.warn(msg, ...extra) : console.info(msg);\n  addToScreen(`⚠ - ${msg}`);\n}\n\nconst finalizeResult = async (data) => {\n  console.log(data);\n  console.info(`✅ - Done!`);\n  addToScreen(`✅ - Done!`);\n  window['mainResults'] = data;\n  document.querySelector('.stage').classList.add('done');\n  document.querySelector('#download').classList.remove('hide');\n}\n\nconst getJsonFile = () => {\n  let data = window['mainResults'];\n  let str = JSON.stringify(data);\n  download('potentials.json', str);\n}\nwindow['getJsonFile'] = getJsonFile;\n\nfunction download(file, text) {\n  const element = document.createElement('a');\n  element.className = 'hide';\n  element.setAttribute('href', 'data:text/plain;charset=utf-8, ' + encodeURIComponent(text));\n  element.setAttribute('download', file);\n  document.body.appendChild(element);\n  element.click();\n  document.body.removeChild(element);\n}\n\nexport {\n  extract_csv_data,\n  fixBooleanField,\n  getFilteredEvents,\n  // strToDate,\n  // dateToStr,\n  logInfo, logWarning, finalizeResult,\n  calculatePottentialMatches,\n  getJsonFile,\n};\n\n","import { calculatePottentialMatches, dateToStr, extract_csv_data, finalizeResult, fixBooleanField, getFilteredEvents, logInfo, logWarning, strToDate } from \"./logic\";\n\nlet events_txt = \"\";\nlet asoc_txt = \"\";\n\nlet preconditions = [];\n\nsetTimeout (async () => {\n\npreconditions.push(\n  fetch(\"../DataMargu/data180822.csv\")\n    .then(async (r) =>\n      (r.ok) ? r :\n      await fetch(\"https://raw.githubusercontent.com/GiladanoN/MargTrainCross/master/data180822.csv\")\n    )\n    .then(async (r) => await r.text())\n    .then((d) => (events_txt = d))\n  // .then(() => console.log(events_txt.length))\n);\n\npreconditions.push(\n  fetch(\"../DataMargu/Data%20Table.csv\")\n    .then(async (r) =>\n      (r.ok) ? r :\n      await fetch(\"https://raw.githubusercontent.com/GiladanoN/MargTrainCross/master/Data%20Table.csv\")\n    )\n    .then(async (r) => await r.text())\n    .then((d) => (asoc_txt = d))\n  // .then(() => console.log(asoc_txt.length))\n);\n\n}, 0);\n\nconst main = async () => {\n\n  logInfo('Getting files ready...')\n  try {\n    let fetchResults = [];\n    // if (\"scheduler\" in window) {\n    //   fetchResults = preconditions\n    //     .map(async cond => window.scheduler.postTask( async () => await cond.then(), { priority: \"user-blocking\" } )) \n    // }\n    // else\n      fetchResults = await Promise.all(preconditions);\n    if (fetchResults.filter(res => !res).length > 0)\n      throw 'one or more fetch has failed';\n  }\n  catch (err) {\n    logWarning('Something wen\\'t wrong getting the data. Stopping main activities.')\n    return;\n  }\n  logInfo('Files loaded. mapping out data...')\n\n  let [events_obj, asoc_obj] =\n    await Promise.all([\n      extract_csv_data(events_txt),\n      extract_csv_data(asoc_txt)\n    ]);\n  \n  asoc_obj.csv_mapped = await fixBooleanField(asoc_obj.csv_mapped, \"Is_Virtual\");\n\n  asoc_obj.virtual_sensors = await (async () => asoc_obj.csv_mapped.filter(a => a.Is_Virtual))();\n  asoc_obj.physical_sensors = await (async () => asoc_obj.csv_mapped.filter(a => !a.Is_Virtual))();\n\n  logInfo('Data mapped out. filtering out relevant event logs...')\n\n  let filter = \n    m => m.desc.includes(\"זיהוי רכבת\") && !m.desc.includes(\"סיום\");\n\n  const train_detected_events =\n    await getFilteredEvents(events_obj, asoc_obj, filter);\n\n  logInfo('Relevant events were filtered. starting to calucalte pottential matches...')\n\n  let potentials = await calculatePottentialMatches(train_detected_events, asoc_obj);\n\n  logInfo('All pottential matches were calucalte! see results below.')\n  await finalizeResult(potentials);\n}\n\n// var window['mainAlreadyRunning'];\nif (!window['mainAlreadyRunning'])\n  window['mainAlreadyRunning'] = setTimeout(async () => await main(), 50);  // run async\nelse {\n  logInfo('Seems the results where already calculated prior.');\n  finalizeResult( window['mainResults'] );\n}\n","// import \"./styles.css\";\n// document.getElementById(\"app\").innerHTML = `\n// `;\n\nrequire(\"./proto\");\nrequire(\"./logic\");\nrequire(\"./main\");\n"]}